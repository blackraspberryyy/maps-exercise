{"version":3,"sources":["components/maps/Maps.tsx","components/maps/MapPin.tsx","components/Dashboard.tsx","App.tsx","index.tsx"],"names":["CEBU_COORDINATE","lat","lng","Container","styled","div","MapContainer","SideNav","Maps","props","className","useState","mapsApi","setMapApi","restaurants","setRestaurants","drawMode","setDrawMode","PlacesService","setPlacesService","drawingManager","setDrawingManager","showRestaurants","a","maps","textSearch","query","type","response","status","results","places","PlacesServiceStatus","OK","forEach","res","push","address","formatted_address","name","location","geometry","useEffect","map","setMap","event","addListener","overlay","bounds","getBounds","bootstrapURLKeys","key","libraries","center","defaultZoom","onGoogleApiLoaded","api","drawing","DrawingManager","drawingMode","OverlayType","CIRCLE","drawingControl","drawingControlOptions","position","ControlPosition","TOP_CENTER","drawingModes","RECTANGLE","apiIsLoaded","yesIWantToUseGoogleMapApiInternals","restaurant","index","MapPin","onClick","TextContainer","MenuHeader","menu","setMenu","e","stopPropagation","open","onClose","use","style","flex","icon","paddingTop","color","Dashboard","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7a8a3f4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport styled from \"styled-components\";\nimport { List, ListItem } from \"rmwc\";\nimport { Restaurant } from \"../../types\";\nimport { MapPin } from \".\";\n\nconst API_KEY = \"AIzaSyCrWA0GMWAD5vVLl1z6fmwlNgQoTINGm34\";\n\nconst CEBU_COORDINATE = {\n  lat: 10.3005178,\n  lng: 123.8861904,\n};\n\ntype GoogleMapsApiType = {\n  map: any;\n  maps: any;\n  ref: Element | null;\n};\n\ntype MapsProps = {\n  className?: string;\n};\n\nconst Container = styled.div`\n  display: flex;\n  height: 100vh;\n`;\n\nconst MapContainer = styled.div`\n  height: 100%;\n  width: 100%;\n`;\n\nconst SideNav = styled.div`\n  width: 500px;\n  background: white;\n`;\n\nexport function Maps(props: MapsProps) {\n  const { className } = props;\n\n  const [mapsApi, setMapApi] = useState<GoogleMapsApiType | null>(null);\n  const [restaurants, setRestaurants] = useState<Restaurant[]>([]);\n  const [drawMode, setDrawMode] = useState<boolean>(false);\n  const [PlacesService, setPlacesService] = useState<any>();\n  const [drawingManager, setDrawingManager] = useState<any>();\n\n  const apiIsLoaded = (api: GoogleMapsApiType) => {\n    setMapApi(api);\n\n    if (api && api.map && api.maps) {\n      const { map, maps } = api;\n\n      // Set PlacesService\n      setPlacesService(new maps.places.PlacesService(map));\n\n      // set DrawingManger\n      setDrawingManager(\n        new maps.drawing.DrawingManager({\n          drawingMode: maps.drawing.OverlayType.CIRCLE,\n          drawingControl: true,\n          drawingControlOptions: {\n            position: maps.ControlPosition.TOP_CENTER,\n            drawingModes: [\n              maps.drawing.OverlayType.CIRCLE,\n              maps.drawing.OverlayType.RECTANGLE,\n            ],\n          },\n        })\n      );\n    }\n  };\n\n  const showRestaurants = async () => {\n    if (mapsApi && mapsApi.maps && PlacesService) {\n      const { maps } = mapsApi;\n\n      PlacesService.textSearch(\n        {\n          query: \"Restaurants in Cebu City\",\n          type: \"restaurant\",\n        },\n        function (response: any, status: any) {\n          let results: any[] = [];\n          if (status === maps.places.PlacesServiceStatus.OK) {\n            response.forEach((res: any) => {\n              results.push({\n                address: res.formatted_address,\n                name: res.name,\n                location: {\n                  lat: res.geometry.location.lat(),\n                  lng: res.geometry.location.lng(),\n                },\n              });\n            });\n          }\n          setRestaurants(results);\n        }\n      );\n    }\n  };\n\n  const drawPolygon = () => {\n    setDrawMode(!drawMode);\n  };\n\n  useEffect(() => {\n    if (drawingManager && mapsApi && mapsApi.map && mapsApi.maps) {\n      const { map, maps } = mapsApi;\n\n      if (drawMode) {\n        drawingManager.setMap(map);\n      } else {\n        drawingManager.setMap(null);\n      }\n\n      maps.event.addListener(\n        drawingManager,\n        \"overlaycomplete\",\n        function (overlay: any) {\n          const bounds = overlay.overlay.getBounds();\n\n          PlacesService.textSearch(\n            {\n              query: \"Restaurants in Cebu City\",\n              type: \"restaurant\",\n              bounds,\n            },\n            function (response: any, status: any) {\n              let results: any[] = [];\n              if (status === maps.places.PlacesServiceStatus.OK) {\n                response.forEach((res: any) => {\n                  results.push({\n                    address: res.formatted_address,\n                    name: res.name,\n                    location: {\n                      lat: res.geometry.location.lat(),\n                      lng: res.geometry.location.lng(),\n                    },\n                  });\n                });\n              }\n              setRestaurants(results);\n            }\n          );\n        }\n      );\n    }\n  }, [\n    drawMode,\n    mapsApi,\n    mapsApi?.map,\n    mapsApi?.maps,\n    drawingManager,\n    PlacesService,\n  ]);\n\n  return (\n    <Container className={className}>\n      <MapContainer>\n        <GoogleMapReact\n          bootstrapURLKeys={{\n            key: API_KEY,\n            libraries: [\"places\", \"drawing\"],\n          }}\n          center={CEBU_COORDINATE}\n          defaultZoom={14}\n          onGoogleApiLoaded={(api: GoogleMapsApiType) => apiIsLoaded(api)}\n          yesIWantToUseGoogleMapApiInternals\n        >\n          {restaurants &&\n            restaurants.map((restaurant: any, index: number) => (\n              <MapPin\n                key={\"restaurant-\" + index}\n                restaurant={restaurant}\n                lat={restaurant.location.lat}\n                lng={restaurant.location.lng}\n              />\n            ))}\n        </GoogleMapReact>\n      </MapContainer>\n      <SideNav>\n        <List>\n          <ListItem onClick={showRestaurants}>\n            Show Restaurants in Cebu\n          </ListItem>\n          <ListItem onClick={drawPolygon}>Draw Polygon</ListItem>\n        </List>\n      </SideNav>\n    </Container>\n  );\n}\n","import React, { useState } from \"react\";\nimport { IconButton, Menu, MenuSurfaceAnchor, Typography } from \"rmwc\";\nimport styled from \"styled-components\";\nimport { Restaurant } from \"../../types\";\n\ntype MapPinProps = {\n  restaurant: Restaurant;\n  lat: number;\n  lng: number;\n};\n\nconst TextContainer = styled.div`\n  width: 250px;\n  background: white;\n  border-radius: 3px;\n  padding: 8px;\n`;\n\nconst MenuHeader = styled.div`\n  display: flex;\n  align-items: stretch;\n  justify-content: stretch;\n`;\n\nexport function MapPin(props: MapPinProps) {\n  const { restaurant } = props;\n\n  const [menu, setMenu] = useState<boolean>(false);\n  return (\n    <div\n      onClick={(e) => {\n        e.stopPropagation();\n      }}\n    >\n      <MenuSurfaceAnchor>\n        <Menu open={menu} onClose={() => setMenu(false)}>\n          <TextContainer>\n            <MenuHeader>\n              <Typography use=\"headline6\">{restaurant.name}</Typography>\n              <div style={{ flex: 1 }} />\n              <IconButton icon=\"close\" onClick={() => setMenu(false)} />\n            </MenuHeader>\n            <hr />\n            <Typography use=\"caption\" style={{ paddingTop: 16 }}>\n              {restaurant.address}\n            </Typography>\n          </TextContainer>\n        </Menu>\n\n        <IconButton\n          icon=\"place\"\n          style={{ color: \"#ea4335\" }}\n          onClick={(e) => {\n            e.stopPropagation();\n            setMenu(!menu);\n          }}\n        />\n      </MenuSurfaceAnchor>\n    </div>\n  );\n}\n","import { Maps } from \"./maps\";\n\nexport default function Dashboard() {\n  return <Maps />;\n}\n","import Dashboard from \"./components/Dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport \"rmwc/dist/styles\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}