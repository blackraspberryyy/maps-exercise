{"version":3,"sources":["components/maps/Maps.tsx","components/maps/MapPin.tsx","components/Dashboard.tsx","App.tsx","index.tsx"],"names":["CEBU_COORDINATE","lat","lng","Container","styled","div","MapContainer","SideNav","Maps","props","className","useState","mapsApi","setMapApi","restaurants","setRestaurants","drawMode","setDrawMode","PlacesService","setPlacesService","DirectionsService","setDirectionsService","DirectionsRenderer","setDirectionsRenderer","drawingManager","setDrawingManager","usePosition","latitude","longitude","showRestaurants","a","maps","textSearch","query","type","response","status","results","places","PlacesServiceStatus","OK","forEach","res","push","address","formatted_address","name","location","geometry","placeId","place_id","showRoute","restaurant","map","setMap","request","origin","LatLng","destination","travelMode","route","setDirections","useEffect","event","addListener","overlay","bounds","getBounds","bootstrapURLKeys","key","libraries","center","defaultZoom","onGoogleApiLoaded","api","drawing","DrawingManager","drawingMode","OverlayType","CIRCLE","drawingControl","drawingControlOptions","position","ControlPosition","TOP_CENTER","drawingModes","RECTANGLE","apiIsLoaded","yesIWantToUseGoogleMapApiInternals","index","MapPin","onDirectionClick","unelevated","style","margin","onClick","flex","danger","TextContainer","MenuHeader","menu","setMenu","e","stopPropagation","open","onClose","use","icon","paddingTop","color","Dashboard","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9ea9ede.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport styled from \"styled-components\";\nimport { usePosition } from \"use-position\";\nimport { Button } from \"rmwc\";\nimport { Restaurant } from \"../../types\";\nimport { MapPin } from \".\";\n\nconst API_KEY = \"AIzaSyCrWA0GMWAD5vVLl1z6fmwlNgQoTINGm34\";\n\nconst CEBU_COORDINATE = {\n  lat: 10.3005178,\n  lng: 123.8861904,\n};\n\ntype GoogleMapsApiType = {\n  map: any;\n  maps: any;\n  ref: Element | null;\n};\n\ntype MapsProps = {\n  className?: string;\n};\n\nconst Container = styled.div`\n  display: flex;\n  height: 100vh;\n`;\n\nconst MapContainer = styled.div`\n  height: 100%;\n  width: 100%;\n`;\n\nconst SideNav = styled.div`\n  width: 500px;\n  background: white;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport function Maps(props: MapsProps) {\n  const { className } = props;\n\n  const [mapsApi, setMapApi] = useState<GoogleMapsApiType | null>(null);\n  const [restaurants, setRestaurants] = useState<Restaurant[]>([]);\n  const [drawMode, setDrawMode] = useState<boolean>(false);\n  const [PlacesService, setPlacesService] = useState<any>();\n  const [DirectionsService, setDirectionsService] = useState<any>();\n  const [DirectionsRenderer, setDirectionsRenderer] = useState<any>();\n  const [drawingManager, setDrawingManager] = useState<any>();\n  const { latitude, longitude } = usePosition(true);\n\n  const apiIsLoaded = (api: GoogleMapsApiType) => {\n    setMapApi(api);\n\n    if (api && api.map && api.maps) {\n      const { map, maps } = api;\n\n      // Set PlacesService\n      setPlacesService(new maps.places.PlacesService(map));\n\n      // Set DirectionsService\n      setDirectionsService(new maps.DirectionsService());\n\n      // Set DirectionsRenderer\n      setDirectionsRenderer(new maps.DirectionsRenderer());\n\n      // set DrawingManger\n      setDrawingManager(\n        new maps.drawing.DrawingManager({\n          drawingMode: maps.drawing.OverlayType.CIRCLE,\n          drawingControl: true,\n          drawingControlOptions: {\n            position: maps.ControlPosition.TOP_CENTER,\n            drawingModes: [\n              maps.drawing.OverlayType.CIRCLE,\n              maps.drawing.OverlayType.RECTANGLE,\n            ],\n          },\n        })\n      );\n    }\n  };\n\n  const showRestaurants = async () => {\n    if (mapsApi && mapsApi.maps && PlacesService) {\n      const { maps } = mapsApi;\n\n      PlacesService.textSearch(\n        {\n          query: \"Restaurants in Cebu City\",\n          type: \"restaurant\",\n        },\n        function (response: any, status: any) {\n          let results: any[] = [];\n          if (status === maps.places.PlacesServiceStatus.OK) {\n            response.forEach((res: any) => {\n              results.push({\n                address: res.formatted_address,\n                name: res.name,\n                location: {\n                  lat: res.geometry.location.lat(),\n                  lng: res.geometry.location.lng(),\n                },\n                placeId: res.place_id,\n              });\n            });\n          }\n          setRestaurants(results);\n        }\n      );\n    }\n  };\n\n  const drawPolygon = () => {\n    setDrawMode(!drawMode);\n  };\n\n  const showRoute = (restaurant: Restaurant) => {\n    if (mapsApi && mapsApi.maps && mapsApi.map) {\n      DirectionsRenderer.setMap(mapsApi.map);\n      const origin = new mapsApi.maps.LatLng(latitude, longitude);\n      const destination = new mapsApi.maps.LatLng(\n        restaurant.location.lat,\n        restaurant.location.lng\n      );\n      const travelMode = \"DRIVING\";\n      const request = { origin, destination, travelMode };\n\n      DirectionsService.route(request, function (response: any, status: any) {\n        if (status === \"OK\") {\n          DirectionsRenderer.setDirections(response);\n        }\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (drawingManager && mapsApi && mapsApi.map && mapsApi.maps) {\n      const { map, maps } = mapsApi;\n\n      if (drawMode) {\n        drawingManager.setMap(map);\n      } else {\n        drawingManager.setMap(null);\n      }\n\n      maps.event.addListener(\n        drawingManager,\n        \"overlaycomplete\",\n        function (overlay: any) {\n          const bounds = overlay.overlay.getBounds();\n\n          PlacesService.textSearch(\n            {\n              type: \"restaurant\",\n              bounds,\n            },\n            function (response: any, status: any) {\n              let results: any[] = [];\n              if (status === maps.places.PlacesServiceStatus.OK) {\n                response.forEach((res: any) => {\n                  results.push({\n                    address: res.formatted_address,\n                    name: res.name,\n                    location: {\n                      lat: res.geometry.location.lat(),\n                      lng: res.geometry.location.lng(),\n                    },\n                  });\n                });\n              }\n              setRestaurants(results);\n\n              // Remove Shape overlay\n              overlay.overlay.setMap(null);\n            }\n          );\n        }\n      );\n    }\n  }, [\n    drawMode,\n    mapsApi,\n    mapsApi?.map,\n    mapsApi?.maps,\n    drawingManager,\n    PlacesService,\n  ]);\n\n  return (\n    <Container className={className}>\n      <MapContainer>\n        <GoogleMapReact\n          bootstrapURLKeys={{\n            key: API_KEY,\n            libraries: [\"places\", \"drawing\"],\n          }}\n          center={CEBU_COORDINATE}\n          defaultZoom={14}\n          onGoogleApiLoaded={(api: GoogleMapsApiType) => apiIsLoaded(api)}\n          yesIWantToUseGoogleMapApiInternals\n        >\n          {restaurants &&\n            restaurants.map((restaurant: any, index: number) => (\n              <MapPin\n                key={\"restaurant-\" + index}\n                restaurant={restaurant}\n                lat={restaurant.location.lat}\n                lng={restaurant.location.lng}\n                onDirectionClick={showRoute}\n              />\n            ))}\n        </GoogleMapReact>\n      </MapContainer>\n      <SideNav>\n        <Button unelevated style={{ margin: 8 }} onClick={showRestaurants}>\n          Show Restaurants in Cebu\n        </Button>\n        <Button\n          unelevated={!drawMode}\n          style={{ margin: 8 }}\n          onClick={drawPolygon}\n        >\n          {!drawMode ? \"Draw Polygon\" : \"Toggle off Draw Mode\"}\n        </Button>\n        <div style={{ flex: 1 }}></div>\n        <Button\n          danger\n          style={{ margin: 8 }}\n          onClick={() => {\n            DirectionsRenderer.setMap(null);\n          }}\n        >\n          Remove any existing Directions Overlay\n        </Button>\n      </SideNav>\n    </Container>\n  );\n}\n","import React, { useState } from \"react\";\nimport { IconButton, Menu, MenuSurfaceAnchor, Typography } from \"rmwc\";\nimport styled from \"styled-components\";\nimport { Restaurant } from \"../../types\";\n\ntype MapPinProps = {\n  restaurant: Restaurant;\n  lat: number;\n  lng: number;\n  onDirectionClick: (restaurant: Restaurant) => void;\n};\n\nconst Container = styled.div`\n  margin-left: -24px;\n  margin-top: -24px;\n`;\n\nconst TextContainer = styled.div`\n  width: 250px;\n  background: white;\n  border-radius: 3px;\n  padding: 8px;\n`;\n\nconst MenuHeader = styled.div`\n  display: flex;\n  align-items: stretch;\n  justify-content: stretch;\n`;\n\nexport function MapPin(props: MapPinProps) {\n  const { restaurant, onDirectionClick } = props;\n\n  const [menu, setMenu] = useState<boolean>(false);\n  return (\n    <Container\n      onClick={(e) => {\n        e.stopPropagation();\n      }}\n    >\n      <MenuSurfaceAnchor>\n        <Menu open={menu} onClose={() => setMenu(false)}>\n          <TextContainer>\n            <MenuHeader>\n              <Typography use=\"headline6\">{restaurant.name}</Typography>\n              <div style={{ flex: 1 }} />\n              <IconButton\n                icon=\"assistant_direction\"\n                onClick={() => {\n                  onDirectionClick(restaurant);\n                  setMenu(false);\n                }}\n              />\n              <IconButton icon=\"close\" onClick={() => setMenu(false)} />\n            </MenuHeader>\n            <hr />\n            <Typography use=\"caption\" style={{ paddingTop: 16 }}>\n              {restaurant.address}\n            </Typography>\n          </TextContainer>\n        </Menu>\n\n        <IconButton\n          icon=\"place\"\n          style={{ color: \"#ea4335\" }}\n          onClick={(e) => {\n            e.stopPropagation();\n            setMenu(!menu);\n          }}\n        />\n      </MenuSurfaceAnchor>\n    </Container>\n  );\n}\n","import { Maps } from \"./maps\";\n\nexport default function Dashboard() {\n  return <Maps />;\n}\n","import Dashboard from \"./components/Dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport \"rmwc/dist/styles\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}